{"version":3,"sources":["scripts/main.js"],"names":["BASE_URL","phonesEndpoint","detailsEndpoint","id","timeToWait","request","url","fetch","then","response","ok","Error","status","statusText","headers","get","includes","json","getPhones","Promise","race","resolve","reject","setTimeout","phones","elementUl","document","createElement","insertAdjacentHTML","map","phone","name","join","body","append","all","_phones","details","phonesWithDetails","index","console","log"],"mappings":";AAAA,aAgDS,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,KAAA,GAAA,GAAA,OAAA,sBAAA,CAAA,IAAA,EAAA,OAAA,sBAAA,GAAA,IAAA,EAAA,EAAA,OAAA,SAAA,GAAA,OAAA,OAAA,yBAAA,EAAA,GAAA,cAAA,EAAA,KAAA,MAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,CAAA,IAAA,EAAA,MAAA,UAAA,GAAA,UAAA,GAAA,GAAA,EAAA,EAAA,EAAA,OAAA,IAAA,GAAA,QAAA,SAAA,GAAA,EAAA,EAAA,EAAA,EAAA,MAAA,OAAA,0BAAA,OAAA,iBAAA,EAAA,OAAA,0BAAA,IAAA,EAAA,OAAA,IAAA,QAAA,SAAA,GAAA,OAAA,eAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,MAAA,OAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EA9CT,IAAMA,EAAW,4DACXC,EAAiB,eACjBC,EAAkB,SAAAC,GAAiBA,MAAAA,WAAAA,OAAAA,EAAf,UACpBC,EAAa,IAEbC,EAAU,SAAAC,GACdC,OAAAA,MAAMP,EAAWM,GACdE,KAAK,SAAAC,GACA,IAACA,EAASC,GACN,MAAA,IAAIC,MAASF,GAAAA,OAAAA,EAASG,OAAYH,OAAAA,OAAAA,EAASI,aAC5C,IAAKJ,EAASK,QAAQC,IAAI,gBAC9BC,SAAS,oBACJ,MAAA,IAAIL,MAAM,iCAGXF,OAAAA,EAASQ,UAGhBC,EAAY,WAChBC,QAAQC,KAAK,CACXf,EAAQJ,GACR,IAAIkB,QAAQ,SAACE,EAASC,GACpBC,OAAAA,WAAW,WAAMD,OAAAA,EAAO,IAAIX,MAAM,aAAaP,OAEhDI,KAAK,SAAAgB,GACEC,IAAAA,EAAYC,SAASC,cAAc,MAMlCR,OAJPM,EAAUG,mBAAmB,aACxBJ,GAAAA,OAAAA,EAAOK,IAAI,SAAAC,GAAgBA,MAAAA,OAAAA,OAAAA,EAAMC,KAAjB,WAA8BC,KAAK,MACxDN,SAASO,KAAKC,OAAOT,GAEdN,QAAQgB,IACbX,EAAOK,IAAI,SAAAO,GAAW/B,OAAAA,EAAQH,EAAgBkC,EAAQjC,QACrDK,KAAK,SAAA6B,GACEC,IAAAA,EACJd,EAAOK,IAAI,SAACC,EAAOS,GAChBT,OAAAA,EAAAA,EAAAA,GAAAA,GACAO,EAAQE,MAIbC,QAAQC,IAAIH,QAKtBpB","file":"main.b81ee0c5.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst BASE_URL = 'https://mate-academy.github.io/phone-catalogue-static/api';\nconst phonesEndpoint = '/phones.json';\nconst detailsEndpoint = id => `/phones/${id}.json`;\nconst timeToWait = 5000;\n\nconst request = url =>\n  fetch(BASE_URL + url)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      } else if (!response.headers.get('content-type')\n        .includes('application/json')) {\n        throw new Error('Content type is not supported');\n      }\n\n      return response.json();\n    });\n\nconst getPhones = () => {\n  Promise.race([\n    request(phonesEndpoint),\n    new Promise((resolve, reject) =>\n      setTimeout(() => reject(new Error('timeout')), timeToWait)\n    )])\n    .then(phones => {\n      const elementUl = document.createElement('ul');\n\n      elementUl.insertAdjacentHTML('afterbegin',\n        `${phones.map(phone => `<li>${phone.name}</li>`).join('')}`);\n      document.body.append(elementUl);\n\n      return Promise.all(\n        phones.map(_phones => request(detailsEndpoint(_phones.id))))\n        .then(details => {\n          const phonesWithDetails\n          = phones.map((phone, index) => ({\n            ...phone,\n            ...details[index],\n          }));\n\n          // eslint-disable-next-line\n          console.log(phonesWithDetails);\n        });\n    });\n};\n\ngetPhones();\n"]}